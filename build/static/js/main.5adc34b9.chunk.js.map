{"version":3,"sources":["components/Navbar/index.js","components/Cards/index.js","pages/Main.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Cards","props","src","image","onClick","handleClick","alt","name","id","Main","state","score","topScore","Img","clicked","shuffleIndex","rand","i","length","Math","floor","random","handleItemClick","event","target","console","log","newState","setState","this","map","item","key","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"opCAceA,MAVf,WACE,OACE,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,gBAAf,OACM,0BAAMA,UAAW,SAAjB,SADN,kB,wDCQSC,MAXf,SAAeC,GAGX,OACI,yBAAKF,UAAU,QACX,yBAAKG,IAAKD,EAAME,MAAOJ,UAAU,WAAWK,QAASH,EAAMI,YAAaC,IAAKL,EAAMM,KAAMC,GAAIP,EAAMO,OCsFhGC,E,4MAvFbC,MAAQ,CACNC,MAAO,EACPC,SAAU,EACVC,MACAC,SAAS,G,EAIXC,aAAe,WAIb,IAFA,IAAIC,EAAO,EAEFC,EAAIJ,EAAIK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAEvCD,EAAOG,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAFA,MAGjB,CAACJ,EAAIG,GAAOH,EAAII,IAArCJ,EAAII,GAHkC,KAG9BJ,EAAIG,GAH0B,O,EAQ3CM,gBAAkB,SAAAC,GAChB,IAAMf,EAAKe,EAAMC,OAAOhB,GACxBiB,QAAQC,IAAI,cAAgBlB,GAC5B,IAAMmB,EAAQ,eAAQ,EAAKjB,OAG3B,IAA4B,IAAxBG,EAAIL,EAAK,GAAGM,QACdD,EAAIL,EAAK,GAAGM,SAAU,EACtBa,EAAShB,QACTc,QAAQC,IAAI,aACZD,QAAQC,IAAIb,OAIT,CACC,EAAKH,MAAMC,MAAQ,EAAKD,MAAME,WAChCe,EAASf,SAAW,EAAKF,MAAMC,OAGjCgB,EAAShB,MAAQ,EAGjB,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9BJ,EAAII,GAAGH,SAAU,EAGnBW,QAAQC,IAAI,gBAKd,EAAKE,SAASD,GACdF,QAAQC,IAAI,wBACZ,EAAKX,gB,uDAIG,IAAD,OACP,OACE,6BACE,yBAAKhB,UAAU,OACb,oDACA,yBAAKA,UAAU,cACb,uCAAa8B,KAAKnB,MAAMC,MAAxB,eAA2CkB,KAAKnB,MAAME,YAI1D,yBAAKb,UAAU,oDAIX8B,KAAKnB,MAAMG,IAAIiB,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CACEC,IAAKD,EAAKvB,GACVA,GAAIuB,EAAKvB,GACTD,KAAMwB,EAAKxB,KACXF,YAAa,EAAKiB,gBAClBnB,MAAO4B,EAAK5B,iB,GA/ET8B,a,MCKJC,MARf,WACE,OACE,4BAAQnC,UAAU,UAChB,+DCWSoC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.5adc34b9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"navbar-brand\">\n        KDA <span className= \"akali\">Akali</span> Clicky Game \n        </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Cards(props) {\n\n\n    return (\n        <div className=\"card\" >\n            <img src={props.image} className=\"card-img\" onClick={props.handleClick} alt={props.name} id={props.id}></img>\n        </div>\n    );\n\n}\n\nexport default Cards;","import React, { Component } from \"react\";\nimport \"./main.css\";\nimport Img from \"../images.json\";\nimport Cards from \"../components/Cards\";\n\n\nclass Main extends Component {\n  //holds our game information\n  state = {\n    score: 0,\n    topScore: 0,\n    Img, //array of all imgs from json file\n    clicked: false\n  };\n\n  //function that shuffles indexs\n  shuffleIndex = () => {\n\n    var rand = 0;\n    //shuffle indexs  \n    for (let i = Img.length - 1; i > 0; i--) {\n      //apply logic here\n      rand = Math.floor(Math.random() * (i + 1));\n      [Img[i], Img[rand]] = [Img[rand], Img[i]];\n    }\n  }\n\n  //handles the click on the pictures\n  handleItemClick = event => {\n    const id = event.target.id;//select the id of the picture clicked\n    console.log(\"Clicked ID:\" + id);\n    const newState = { ...this.state }; //temp variable to hold our state info\n\n\n    if (Img[id - 1].clicked === false) {\n      Img[id - 1].clicked = true; //set to true when img is clicked\n      newState.score++; //add a point to score\n      console.log(\"add point\");\n      console.log(Img);\n    }\n\n    //restart and clear fields\n    else {\n      if (this.state.score > this.state.topScore) {\n        newState.topScore = this.state.score;//make current score the top score\n      }\n\n      newState.score = 0; //set score back to 0\n\n      //reset clicked flags to false\n      for (let i = 0; i < Img.length; i++) {\n        Img[i].clicked = false;\n      }\n\n      console.log(\"Game Restart\");\n      //console.log(Img)\n    }\n\n    //update state variables\n    this.setState(newState);\n    console.log(\"setting the newState\");\n    this.shuffleIndex();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"m-3\">\n          <p>Choose a Card to Play</p>\n          <div className=\"text-right\">\n            <span>Score:{this.state.score} High Score:{this.state.topScore}</span>\n          </div>\n        </div>\n\n        <div className=\"container-fluid p-2 col-9 justify-content-center\">\n          {\n            /* Loop through all the items in the static list  */\n            //component did mount\n            this.state.Img.map(item => (\n              <Cards\n                key={item.id}\n                id={item.id}\n                name={item.name}\n                handleClick={this.handleItemClick}\n                image={item.image}\n              />\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>ernestUrzua Click Game 2020</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./pages/Main\";\nimport Footer from './components/Footer'\n\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}